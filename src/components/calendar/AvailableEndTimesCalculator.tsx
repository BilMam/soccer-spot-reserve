
import { timeToMinutes, minutesToTime } from '@/utils/timeUtils';
import { SlotStatusUtils } from './SlotStatusUtils';

export class AvailableEndTimesCalculator {
  private slotStatusUtils: SlotStatusUtils;

  constructor(slotStatusUtils: SlotStatusUtils) {
    this.slotStatusUtils = slotStatusUtils;
  }

  // CORRIG√â: Utilise maintenant la d√©tection de chevauchements
  getAvailableEndTimes(startTime: string): string[] {
    if (!startTime) return [];
    const startMinutes = timeToMinutes(startTime);
    const availableEndTimes: string[] = [];

    console.log('üîç getAvailableEndTimes - Recherche depuis:', startTime);

    for (let minutes = startMinutes + 30; minutes <= timeToMinutes('22:00'); minutes += 30) {
      const currentSlotStart = minutesToTime(minutes - 30);
      const currentSlotEnd = minutesToTime(minutes);
      const endTime = minutesToTime(minutes);
      
      const status = this.slotStatusUtils.getSlotStatus(currentSlotStart, currentSlotEnd);
      console.log('üîç V√©rification cr√©neau:', `${currentSlotStart}-${currentSlotEnd}`, 'status:', status);
      
      if (status === 'available') {
        availableEndTimes.push(endTime);
        console.log('üîç Ajout√© heure de fin possible:', endTime);
      } else {
        // ARR√äTER d√®s qu'on trouve un cr√©neau non disponible
        console.log('üîç Arr√™t √† cause du cr√©neau non disponible:', `${currentSlotStart}-${currentSlotEnd}`, 'status:', status);
        break;
      }
    }
    
    console.log('üîç Heures de fin disponibles finales:', availableEndTimes);
    return availableEndTimes;
  }

  // MISE √Ä JOUR: Cette fonction utilise maintenant la d√©tection de chevauchements
  isRangeAvailable(startTime: string, endTime: string): boolean {
    if (!startTime || !endTime) return false;
    
    console.log('üîç isRangeAvailable - V√©rification plage:', `${startTime}-${endTime}`);

    // Utiliser la nouvelle m√©thode de d√©tection de chevauchements
    if (this.slotStatusUtils.isRangeOverlapping(startTime, endTime)) {
      console.log('üîç Plage NON disponible √† cause d\'un chevauchement');
      return false;
    }

    const startMinutes = timeToMinutes(startTime);
    const endMinutes = timeToMinutes(endTime);

    for (let minutes = startMinutes; minutes < endMinutes; minutes += 30) {
      const slotStartTime = minutesToTime(minutes);
      const slotEndTime = minutesToTime(minutes + 30);
      const status = this.slotStatusUtils.getSlotStatus(slotStartTime, slotEndTime);
      
      console.log('üîç V√©rification sous-cr√©neau:', `${slotStartTime}-${slotEndTime}`, 'status:', status);
      
      if (status !== 'available') {
        console.log('üîç Plage NON disponible √† cause de:', `${slotStartTime}-${slotEndTime}`);
        return false;
      }
    }
    
    console.log('üîç Plage ENTI√àREMENT disponible:', `${startTime}-${endTime}`);
    return true;
  }
}
